name: jenn-ci
run-name: ${{ github.actor }}-jenn-ci

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  
on:
  push: 
    branches: 
      - "*"
  pull_request:
    branches: [ master ]


jobs:
  test:
    runs-on: ubuntu-latest 
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Create base environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: false
          activate-environment: explicit-env
          environment-file: deploy/specs/base.yml
      - name: Environments 
        shell: bash -el {0}
        run: | 
          doit env
      - name: Linting
        shell: bash -el {0}
        run: | 
          doit lint 
      - name: Installation 
        shell: bash -el {0}
        run: | 
          doit install
      - name: Unit Testing
        shell: bash -el {0}
        run: | 
          doit test
      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build
  build:  
    needs: test
    runs-on: ubuntu-latest 
    if: contains(github.ref, 'master') || contains(github.ref, 'merge')
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Create base environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: false
          activate-environment: explicit-env
          environment-file: deploy/specs/base.yml 
      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build
      - name: 🧱 Distribution
        shell: bash -el {0}
        run: | 
          doit build
      - name: 📚 Documentation  
        shell: bash -el {0}
        run: | 
          doit docs
      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build
          overwrite: true
  deploy:  
    needs: build 
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master') || contains(github.ref, 'merge')
    steps: 
      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build
      - name: Stage distribution for test release 
        # GitHub Actions needs dist/ to be at root level
        shell: bash -el {0}
        run: | 
          mv ./build/dist .
      - name: 📦 Ship package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TESTPYPI_TOKEN }}
      - name: ⬆️ Upload documentation to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './build/docs/html'
      - name: 📰 Publish Docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: 📦 Ship package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true
          repository-url: https://upload.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TESTPYPI_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v1.2.3
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
        if: startsWith(github.ref, 'refs/tags/') && steps.deployment.conclusion == 'success'
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
        if: startsWith(github.ref, 'refs/tags/') && steps.deployment.conclusion == 'success'
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
        if: startsWith(github.ref, 'refs/tags/') && steps.deployment.conclusion == 'success'
  
